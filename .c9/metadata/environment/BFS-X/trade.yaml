{"changed":true,"filter":false,"title":"trade.yaml","tooltip":"/BFS-X/trade.yaml","value":"#----------------------------------------------------------\n# 使用するStrategyファイル\n# 　※ 起動パラメータで下記のように指定した場合にはそちらが優先されます。\n#      例) python3 trade.py strategy/st_mfi.py strategy/st_mfi.yaml\n#----------------------------------------------------------\n\nstrategy_py:   strategy/disp_board2.py\nstrategy_yaml: strategy/disp_board2.yaml\n\n# ----------------------------------------------------------\n# 取引所の apikey, secret を記述\n# ----------------------------------------------------------\napikey: 'ScdrTUJ6AkYX1Fwk3u6kWe'\nsecret: 't81+1ptGH5wdkxITxxJkf21zBy+NUrVaNqaD4971zI4='a\n\nproduct: FX_BTC_JPY              # 取引マーケット\n\nconsole_output : true            # これをfalseにしたら、コンソール出力を行わず、代わりにstrategyで指定されたログフォルダに console.txt というファイルで出力する\n                                 # nohupなどで起動する場合に使用。(その場合は tail-f console.txt で稼働状況をチェックできる)\n                                 # console.txtファイルは日付が変わる時にいったん削除されます\nadjust_position_with_api : false # 定期的にAPIでポジション取得してズレがあれば補正する\ncheck_cross_trade : true         # 約定履歴に流れてこないけどgetchildordersで確認して残数がなければ対当売買として処理する\napi_limit2 : 80                  # 1分間の発注数(0.1以下のもの)がこの回数に達するとポジションクローズしてapi_pending_time秒の待機を行います。\napi_pending_time: 180            # api_limitに到達した際に待機する時間（秒）\nbase_position : 0.0 \n\ninterval_health_check : 60.0      # PublicAPI の getboardstate を使ってServerHelthをチェックする頻度（秒）\n\nexecution_check_with_public_channel : False\n\n\n# ----------------------------------------------------------\n# ポジションサーバーの設定\n# ----------------------------------------------------------\n#pos_server : ['localhost', 51000]   # ポジションサーバーを利用する場合にはコメントアウトしてください。\n\npos_server_graph_period : 6          # 何時間分のグラフをプロットするか\npos_server_discord : ''              # グラフの送信先webhook\npos_server_discord_interval : 5      # 何分毎にDiscordへ通知するか\npos_server_discord_send_text : false # 各botの損益をテキストでDiscordへ通知するか\npos_server_discord_bitflyer_color : false\nadjust_max_size : 0.5                # ポジズレの補正時に最大何btcの補正を行うか（大きくずれた際に一度に補正しないように）\n\n#pos_server_discord_influxdb : ['localhost', 8086] # InfluxDBへ損益を登録する場合にはコメントアウトしてください。\n\n# ----------------------------------------------------------\n# ノートレード期間の指定。開始時刻と終了時刻\n# 曜日指定は　0=月曜日、1=火曜日、…　5=土曜日、6=日曜日\n# ----------------------------------------------------------\nno_trade :\n#  - period: 23:45-00:10         # 日付の変わる時（スワップポイントのために動きやすい）\n  - period: 03:50-04:15          # デイリーメンテナンス期間（メンテ期間中の価格変動リスク）\n#  - period: 01:50-11:00,5       # 土曜日のメンテナンス（データベースバックアップのため遅延大き目）\n","undoManager":{"mark":-2,"position":4,"stack":[[{"start":{"row":12,"column":9},"end":{"row":12,"column":31},"action":"insert","lines":["ScdrTUJ6AkYX1Fwk3u6kWe"],"id":2}],[{"start":{"row":13,"column":9},"end":{"row":13,"column":53},"action":"insert","lines":["t81+1ptGH5wdkxITxxJkf21zBy+NUrVaNqaD4971zI4="],"id":3}],[{"start":{"row":28,"column":43},"end":{"row":28,"column":44},"action":"insert","lines":["g"],"id":4},{"start":{"row":28,"column":44},"end":{"row":28,"column":45},"action":"insert","lines":["i"]},{"start":{"row":28,"column":45},"end":{"row":28,"column":46},"action":"insert","lines":["t"]}],[{"start":{"row":28,"column":45},"end":{"row":28,"column":46},"action":"remove","lines":["t"],"id":5},{"start":{"row":28,"column":44},"end":{"row":28,"column":45},"action":"remove","lines":["i"]},{"start":{"row":28,"column":43},"end":{"row":28,"column":44},"action":"remove","lines":["g"]}],[{"start":{"row":13,"column":54},"end":{"row":13,"column":55},"action":"insert","lines":["a"],"id":6}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":10.5,"selection":{"start":{"row":13,"column":55},"end":{"row":13,"column":55},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1590757596541}